//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 11 view controllers.
  struct segue {
    /// This struct is generated for `DobromarketOfferListViewController`, and contains static references to 1 segues.
    struct dobromarketOfferListViewController {
      /// Segue identifier `fromDobromarketOfferListToDobroOfferVC`.
      static let fromDobromarketOfferListToDobroOfferVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DobromarketOfferListViewController, DobromarketOfferViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromDobromarketOfferListToDobroOfferVC")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromDobromarketOfferListToDobroOfferVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromDobromarketOfferListToDobroOfferVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DobromarketOfferListViewController, DobromarketOfferViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.dobromarketOfferListViewController.fromDobromarketOfferListToDobroOfferVC, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `DobromarketOrderListViewController`, and contains static references to 1 segues.
    struct dobromarketOrderListViewController {
      /// Segue identifier `fromDobroOfferListToDobroOfferVC`.
      static let fromDobroOfferListToDobroOfferVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DobromarketOrderListViewController, DobromarketOrderViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromDobroOfferListToDobroOfferVC")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromDobroOfferListToDobroOfferVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromDobroOfferListToDobroOfferVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DobromarketOrderListViewController, DobromarketOrderViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.dobromarketOrderListViewController.fromDobroOfferListToDobroOfferVC, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `DobrorubleOauthViewController`, and contains static references to 1 segues.
    struct dobrorubleOauthViewController {
      /// Segue identifier `fromDobrorubleOauthToPermissionsVC`.
      static let fromDobrorubleOauthToPermissionsVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DobrorubleOauthViewController, PermissionsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromDobrorubleOauthToPermissionsVC")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromDobrorubleOauthToPermissionsVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromDobrorubleOauthToPermissionsVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DobrorubleOauthViewController, PermissionsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.dobrorubleOauthViewController.fromDobrorubleOauthToPermissionsVC, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `EventListViewController`, and contains static references to 1 segues.
    struct eventListViewController {
      /// Segue identifier `fromEventListToEventVC`.
      static let fromEventListToEventVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EventListViewController, EventViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromEventListToEventVC")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromEventListToEventVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromEventListToEventVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EventListViewController, EventViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.eventListViewController.fromEventListToEventVC, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `MainViewController`, and contains static references to 5 segues.
    struct mainViewController {
      /// Segue identifier `fromMainToEventListVC`.
      static let fromMainToEventListVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, EventListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromMainToEventListVC")
      /// Segue identifier `fromMainToEventVC`.
      static let fromMainToEventVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, EventViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromMainToEventVC")
      /// Segue identifier `fromMainToProductListVC`.
      static let fromMainToProductListVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, ProductListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromMainToProductListVC")
      /// Segue identifier `fromMainToProductVC`.
      static let fromMainToProductVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, ProductViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromMainToProductVC")
      /// Segue identifier `fromMainViewControllerToBalanceHistory`.
      static let fromMainViewControllerToBalanceHistory: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, UserBalanceHistoryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromMainViewControllerToBalanceHistory")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromMainToEventListVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromMainToEventListVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, EventListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.fromMainToEventListVC, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromMainToEventVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromMainToEventVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, EventViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.fromMainToEventVC, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromMainToProductListVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromMainToProductListVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, ProductListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.fromMainToProductListVC, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromMainToProductVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromMainToProductVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, ProductViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.fromMainToProductVC, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromMainViewControllerToBalanceHistory`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromMainViewControllerToBalanceHistory(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, UserBalanceHistoryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.fromMainViewControllerToBalanceHistory, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `OnboardingViewController`, and contains static references to 1 segues.
    struct onboardingViewController {
      /// Segue identifier `openTutorialPageViewController`.
      static let openTutorialPageViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OnboardingViewController, TutorialPageViewController> = Rswift.StoryboardSegueIdentifier(identifier: "openTutorialPageViewController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `openTutorialPageViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func openTutorialPageViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OnboardingViewController, TutorialPageViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.onboardingViewController.openTutorialPageViewController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `PermissionsViewController`, and contains static references to 2 segues.
    struct permissionsViewController {
      /// Segue identifier `fromPermissionsToMainVC`.
      static let fromPermissionsToMainVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PermissionsViewController, UIKit.UITabBarController> = Rswift.StoryboardSegueIdentifier(identifier: "fromPermissionsToMainVC")
      /// Segue identifier `fromPermissionsToProfileQuizVC`.
      static let fromPermissionsToProfileQuizVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PermissionsViewController, ProfileQuizViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromPermissionsToProfileQuizVC")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromPermissionsToMainVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromPermissionsToMainVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PermissionsViewController, UIKit.UITabBarController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.permissionsViewController.fromPermissionsToMainVC, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromPermissionsToProfileQuizVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromPermissionsToProfileQuizVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PermissionsViewController, ProfileQuizViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.permissionsViewController.fromPermissionsToProfileQuizVC, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `ProductListViewController`, and contains static references to 1 segues.
    struct productListViewController {
      /// Segue identifier `fromProductListToProductVC`.
      static let fromProductListToProductVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProductListViewController, ProductViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromProductListToProductVC")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromProductListToProductVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromProductListToProductVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProductListViewController, ProductViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.productListViewController.fromProductListToProductVC, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `ProfileQuizViewController`, and contains static references to 1 segues.
    struct profileQuizViewController {
      /// Segue identifier `fromProfileQuizToMainTabBarC`.
      static let fromProfileQuizToMainTabBarC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProfileQuizViewController, UIKit.UITabBarController> = Rswift.StoryboardSegueIdentifier(identifier: "fromProfileQuizToMainTabBarC")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromProfileQuizToMainTabBarC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromProfileQuizToMainTabBarC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProfileQuizViewController, UIKit.UITabBarController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.profileQuizViewController.fromProfileQuizToMainTabBarC, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `QuestListViewController`, and contains static references to 1 segues.
    struct questListViewController {
      /// Segue identifier `fromQuestListToQuestVC`.
      static let fromQuestListToQuestVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, QuestListViewController, QuestViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromQuestListToQuestVC")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromQuestListToQuestVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromQuestListToQuestVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, QuestListViewController, QuestViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.questListViewController.fromQuestListToQuestVC, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `SendCodeToPhoneNumberController`, and contains static references to 1 segues.
    struct sendCodeToPhoneNumberController {
      /// Segue identifier `fromSendCodeVCtoSmsConfirmationController`.
      static let fromSendCodeVCtoSmsConfirmationController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SendCodeToPhoneNumberController, SmsConfirmationViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSendCodeVCtoSmsConfirmationController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `fromSendCodeVCtoSmsConfirmationController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSendCodeVCtoSmsConfirmationController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SendCodeToPhoneNumberController, SmsConfirmationViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sendCodeToPhoneNumberController.fromSendCodeVCtoSmsConfirmationController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 4 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"
    static let comAppleDeveloperHealthkit = true

    struct comAppleDeveloperAssociatedDomains {
      static let applinks3917914RedirectAppmetricaYandexCom = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:3917914.redirect.appmetrica.yandex.com") ?? "applinks:3917914.redirect.appmetrica.yandex.com"

      fileprivate init() {}
    }

    struct comAppleDeveloperHealthkitAccess {
      static let healthRecords = infoPlistString(path: ["com.apple.developer.healthkit.access"], key: "health-records") ?? "health-records"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 68 images.
  struct image {
    /// Image `IconTutorial1`.
    static let iconTutorial1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconTutorial1")
    /// Image `SplashScreen`.
    static let splashScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "SplashScreen")
    /// Image `WalkingPersonIcon`.
    static let walkingPersonIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "WalkingPersonIcon")
    /// Image `backButton`.
    static let backButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "backButton")
    /// Image `backgraundRating`.
    static let backgraundRating = Rswift.ImageResource(bundle: R.hostingBundle, name: "backgraundRating")
    /// Image `district`.
    static let district = Rswift.ImageResource(bundle: R.hostingBundle, name: "district")
    /// Image `iconAlarmClock`.
    static let iconAlarmClock = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAlarmClock")
    /// Image `iconAppleHealth`.
    static let iconAppleHealth = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAppleHealth")
    /// Image `iconArrowNextLight`.
    static let iconArrowNextLight = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconArrowNextLight")
    /// Image `iconArrowNext`.
    static let iconArrowNext = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconArrowNext")
    /// Image `iconBackgroundRublesBalanceMain`.
    static let iconBackgroundRublesBalanceMain = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBackgroundRublesBalanceMain")
    /// Image `iconBackgroundStepsCountMain`.
    static let iconBackgroundStepsCountMain = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBackgroundStepsCountMain")
    /// Image `iconBalanceWelcomeItem`.
    static let iconBalanceWelcomeItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBalanceWelcomeItem")
    /// Image `iconBicycleDriver`.
    static let iconBicycleDriver = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBicycleDriver")
    /// Image `iconBottomBarDobrouble`.
    static let iconBottomBarDobrouble = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBottomBarDobrouble")
    /// Image `iconBottomBarEarn`.
    static let iconBottomBarEarn = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBottomBarEarn")
    /// Image `iconBottomBarHome`.
    static let iconBottomBarHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBottomBarHome")
    /// Image `iconBottomBarMenu`.
    static let iconBottomBarMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBottomBarMenu")
    /// Image `iconBottomBarQrCode`.
    static let iconBottomBarQrCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBottomBarQrCode")
    /// Image `iconBottomBarQr`.
    static let iconBottomBarQr = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBottomBarQr")
    /// Image `iconBottomBarSpend`.
    static let iconBottomBarSpend = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBottomBarSpend")
    /// Image `iconCheckmarkBlue`.
    static let iconCheckmarkBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCheckmarkBlue")
    /// Image `iconCheckmarkGray`.
    static let iconCheckmarkGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCheckmarkGray")
    /// Image `iconCheckmarkSuccess`.
    static let iconCheckmarkSuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCheckmarkSuccess")
    /// Image `iconCloudWarning`.
    static let iconCloudWarning = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCloudWarning")
    /// Image `iconCrossFailure`.
    static let iconCrossFailure = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCrossFailure")
    /// Image `iconCrossGray`.
    static let iconCrossGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCrossGray")
    /// Image `iconFeedback`.
    static let iconFeedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconFeedback")
    /// Image `iconGeolocationSymbol`.
    static let iconGeolocationSymbol = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconGeolocationSymbol")
    /// Image `iconImageCropForeground`.
    static let iconImageCropForeground = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconImageCropForeground")
    /// Image `iconLaunchExternalApp`.
    static let iconLaunchExternalApp = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconLaunchExternalApp")
    /// Image `iconLocationLightBlue`.
    static let iconLocationLightBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconLocationLightBlue")
    /// Image `iconLocationMidRes`.
    static let iconLocationMidRes = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconLocationMidRes")
    /// Image `iconLocation`.
    static let iconLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconLocation")
    /// Image `iconLogout`.
    static let iconLogout = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconLogout")
    /// Image `iconMainScreenBackground`.
    static let iconMainScreenBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconMainScreenBackground")
    /// Image `iconMenuButtonDobroruble`.
    static let iconMenuButtonDobroruble = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconMenuButtonDobroruble")
    /// Image `iconMenuButtonInformation`.
    static let iconMenuButtonInformation = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconMenuButtonInformation")
    /// Image `iconNavigationSmallArrowRightWhite`.
    static let iconNavigationSmallArrowRightWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconNavigationSmallArrowRightWhite")
    /// Image `iconPurpleGradientBackground`.
    static let iconPurpleGradientBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconPurpleGradientBackground")
    /// Image `iconQrCodeFrame`.
    static let iconQrCodeFrame = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconQrCodeFrame")
    /// Image `iconRoundButtonMinus`.
    static let iconRoundButtonMinus = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconRoundButtonMinus")
    /// Image `iconRoundButtonPlus`.
    static let iconRoundButtonPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconRoundButtonPlus")
    /// Image `iconRunningMan`.
    static let iconRunningMan = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconRunningMan")
    /// Image `iconSmartband`.
    static let iconSmartband = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSmartband")
    /// Image `iconSmsAuth`.
    static let iconSmsAuth = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSmsAuth")
    /// Image `iconStarGray`.
    static let iconStarGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconStarGray")
    /// Image `iconStepsPassedWelcomeItem`.
    static let iconStepsPassedWelcomeItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconStepsPassedWelcomeItem")
    /// Image `iconTutorial2`.
    static let iconTutorial2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTutorial2")
    /// Image `iconTutorial3`.
    static let iconTutorial3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTutorial3")
    /// Image `iconUserCurrentLocation`.
    static let iconUserCurrentLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconUserCurrentLocation")
    /// Image `iconWorkoutCycling`.
    static let iconWorkoutCycling = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconWorkoutCycling")
    /// Image `iconWorkoutHomeRunning`.
    static let iconWorkoutHomeRunning = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconWorkoutHomeRunning")
    /// Image `iconWorkoutHomeWalking`.
    static let iconWorkoutHomeWalking = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconWorkoutHomeWalking")
    /// Image `iconWorkoutRunning`.
    static let iconWorkoutRunning = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconWorkoutRunning")
    /// Image `iconWorkoutSkiing`.
    static let iconWorkoutSkiing = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconWorkoutSkiing")
    /// Image `iconWorkoutWalking`.
    static let iconWorkoutWalking = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconWorkoutWalking")
    /// Image `iconWorkoutWinterSkating`.
    static let iconWorkoutWinterSkating = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconWorkoutWinterSkating")
    /// Image `iconspause`.
    static let iconspause = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconspause")
    /// Image `iconsplay24`.
    static let iconsplay24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsplay24")
    /// Image `iconstop24`.
    static let iconstop24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconstop24")
    /// Image `imageWelcomingScreen`.
    static let imageWelcomingScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "imageWelcomingScreen")
    /// Image `pausenew`.
    static let pausenew = Rswift.ImageResource(bundle: R.hostingBundle, name: "pausenew")
    /// Image `personal`.
    static let personal = Rswift.ImageResource(bundle: R.hostingBundle, name: "personal")
    /// Image `stopnew`.
    static let stopnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "stopnew")
    /// Image `swipedown`.
    static let swipedown = Rswift.ImageResource(bundle: R.hostingBundle, name: "swipedown")
    /// Image `swipeleftright`.
    static let swipeleftright = Rswift.ImageResource(bundle: R.hostingBundle, name: "swipeleftright")
    /// Image `traningUser`.
    static let traningUser = Rswift.ImageResource(bundle: R.hostingBundle, name: "traningUser")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconTutorial1", bundle: ..., traitCollection: ...)`
    static func iconTutorial1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTutorial1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SplashScreen", bundle: ..., traitCollection: ...)`
    static func splashScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WalkingPersonIcon", bundle: ..., traitCollection: ...)`
    static func walkingPersonIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkingPersonIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backButton", bundle: ..., traitCollection: ...)`
    static func backButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backgraundRating", bundle: ..., traitCollection: ...)`
    static func backgraundRating(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgraundRating, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "district", bundle: ..., traitCollection: ...)`
    static func district(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.district, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconAlarmClock", bundle: ..., traitCollection: ...)`
    static func iconAlarmClock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAlarmClock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconAppleHealth", bundle: ..., traitCollection: ...)`
    static func iconAppleHealth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAppleHealth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconArrowNext", bundle: ..., traitCollection: ...)`
    static func iconArrowNext(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconArrowNext, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconArrowNextLight", bundle: ..., traitCollection: ...)`
    static func iconArrowNextLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconArrowNextLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconBackgroundRublesBalanceMain", bundle: ..., traitCollection: ...)`
    static func iconBackgroundRublesBalanceMain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBackgroundRublesBalanceMain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconBackgroundStepsCountMain", bundle: ..., traitCollection: ...)`
    static func iconBackgroundStepsCountMain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBackgroundStepsCountMain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconBalanceWelcomeItem", bundle: ..., traitCollection: ...)`
    static func iconBalanceWelcomeItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBalanceWelcomeItem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconBicycleDriver", bundle: ..., traitCollection: ...)`
    static func iconBicycleDriver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBicycleDriver, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconBottomBarDobrouble", bundle: ..., traitCollection: ...)`
    static func iconBottomBarDobrouble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBottomBarDobrouble, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconBottomBarEarn", bundle: ..., traitCollection: ...)`
    static func iconBottomBarEarn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBottomBarEarn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconBottomBarHome", bundle: ..., traitCollection: ...)`
    static func iconBottomBarHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBottomBarHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconBottomBarMenu", bundle: ..., traitCollection: ...)`
    static func iconBottomBarMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBottomBarMenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconBottomBarQr", bundle: ..., traitCollection: ...)`
    static func iconBottomBarQr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBottomBarQr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconBottomBarQrCode", bundle: ..., traitCollection: ...)`
    static func iconBottomBarQrCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBottomBarQrCode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconBottomBarSpend", bundle: ..., traitCollection: ...)`
    static func iconBottomBarSpend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBottomBarSpend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCheckmarkBlue", bundle: ..., traitCollection: ...)`
    static func iconCheckmarkBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCheckmarkBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCheckmarkGray", bundle: ..., traitCollection: ...)`
    static func iconCheckmarkGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCheckmarkGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCheckmarkSuccess", bundle: ..., traitCollection: ...)`
    static func iconCheckmarkSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCheckmarkSuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCloudWarning", bundle: ..., traitCollection: ...)`
    static func iconCloudWarning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCloudWarning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCrossFailure", bundle: ..., traitCollection: ...)`
    static func iconCrossFailure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCrossFailure, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCrossGray", bundle: ..., traitCollection: ...)`
    static func iconCrossGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCrossGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconFeedback", bundle: ..., traitCollection: ...)`
    static func iconFeedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconFeedback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconGeolocationSymbol", bundle: ..., traitCollection: ...)`
    static func iconGeolocationSymbol(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconGeolocationSymbol, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconImageCropForeground", bundle: ..., traitCollection: ...)`
    static func iconImageCropForeground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconImageCropForeground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconLaunchExternalApp", bundle: ..., traitCollection: ...)`
    static func iconLaunchExternalApp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLaunchExternalApp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconLocation", bundle: ..., traitCollection: ...)`
    static func iconLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconLocationLightBlue", bundle: ..., traitCollection: ...)`
    static func iconLocationLightBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLocationLightBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconLocationMidRes", bundle: ..., traitCollection: ...)`
    static func iconLocationMidRes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLocationMidRes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconLogout", bundle: ..., traitCollection: ...)`
    static func iconLogout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLogout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconMainScreenBackground", bundle: ..., traitCollection: ...)`
    static func iconMainScreenBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMainScreenBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconMenuButtonDobroruble", bundle: ..., traitCollection: ...)`
    static func iconMenuButtonDobroruble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMenuButtonDobroruble, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconMenuButtonInformation", bundle: ..., traitCollection: ...)`
    static func iconMenuButtonInformation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMenuButtonInformation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconNavigationSmallArrowRightWhite", bundle: ..., traitCollection: ...)`
    static func iconNavigationSmallArrowRightWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconNavigationSmallArrowRightWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconPurpleGradientBackground", bundle: ..., traitCollection: ...)`
    static func iconPurpleGradientBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPurpleGradientBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconQrCodeFrame", bundle: ..., traitCollection: ...)`
    static func iconQrCodeFrame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconQrCodeFrame, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconRoundButtonMinus", bundle: ..., traitCollection: ...)`
    static func iconRoundButtonMinus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRoundButtonMinus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconRoundButtonPlus", bundle: ..., traitCollection: ...)`
    static func iconRoundButtonPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRoundButtonPlus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconRunningMan", bundle: ..., traitCollection: ...)`
    static func iconRunningMan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRunningMan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSmartband", bundle: ..., traitCollection: ...)`
    static func iconSmartband(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSmartband, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSmsAuth", bundle: ..., traitCollection: ...)`
    static func iconSmsAuth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSmsAuth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconStarGray", bundle: ..., traitCollection: ...)`
    static func iconStarGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconStarGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconStepsPassedWelcomeItem", bundle: ..., traitCollection: ...)`
    static func iconStepsPassedWelcomeItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconStepsPassedWelcomeItem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTutorial2", bundle: ..., traitCollection: ...)`
    static func iconTutorial2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTutorial2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTutorial3", bundle: ..., traitCollection: ...)`
    static func iconTutorial3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTutorial3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconUserCurrentLocation", bundle: ..., traitCollection: ...)`
    static func iconUserCurrentLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUserCurrentLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconWorkoutCycling", bundle: ..., traitCollection: ...)`
    static func iconWorkoutCycling(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWorkoutCycling, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconWorkoutHomeRunning", bundle: ..., traitCollection: ...)`
    static func iconWorkoutHomeRunning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWorkoutHomeRunning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconWorkoutHomeWalking", bundle: ..., traitCollection: ...)`
    static func iconWorkoutHomeWalking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWorkoutHomeWalking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconWorkoutRunning", bundle: ..., traitCollection: ...)`
    static func iconWorkoutRunning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWorkoutRunning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconWorkoutSkiing", bundle: ..., traitCollection: ...)`
    static func iconWorkoutSkiing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWorkoutSkiing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconWorkoutWalking", bundle: ..., traitCollection: ...)`
    static func iconWorkoutWalking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWorkoutWalking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconWorkoutWinterSkating", bundle: ..., traitCollection: ...)`
    static func iconWorkoutWinterSkating(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWorkoutWinterSkating, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconspause", bundle: ..., traitCollection: ...)`
    static func iconspause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconspause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsplay24", bundle: ..., traitCollection: ...)`
    static func iconsplay24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsplay24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconstop24", bundle: ..., traitCollection: ...)`
    static func iconstop24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconstop24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "imageWelcomingScreen", bundle: ..., traitCollection: ...)`
    static func imageWelcomingScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageWelcomingScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pausenew", bundle: ..., traitCollection: ...)`
    static func pausenew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pausenew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "personal", bundle: ..., traitCollection: ...)`
    static func personal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stopnew", bundle: ..., traitCollection: ...)`
    static func stopnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stopnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "swipedown", bundle: ..., traitCollection: ...)`
    static func swipedown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.swipedown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "swipeleftright", bundle: ..., traitCollection: ...)`
    static func swipeleftright(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.swipeleftright, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "traningUser", bundle: ..., traitCollection: ...)`
    static func traningUser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.traningUser, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 34 nibs.
  struct nib {
    /// Nib `BigImageHorizontalSmallCardTableCell`.
    static let bigImageHorizontalSmallCardTableCell = _R.nib._BigImageHorizontalSmallCardTableCell()
    /// Nib `BigImageTitleBadgeTableViewCell`.
    static let bigImageTitleBadgeTableViewCell = _R.nib._BigImageTitleBadgeTableViewCell()
    /// Nib `BigImageTitleFooterTableViewCell`.
    static let bigImageTitleFooterTableViewCell = _R.nib._BigImageTitleFooterTableViewCell()
    /// Nib `ColoredFootersItemCell`.
    static let coloredFootersItemCell = _R.nib._ColoredFootersItemCell()
    /// Nib `CroppedRightImageChipCollectionViewCell`.
    static let croppedRightImageChipCollectionViewCell = _R.nib._CroppedRightImageChipCollectionViewCell()
    /// Nib `DobromarketOrderConfirmationViewController`.
    static let dobromarketOrderConfirmationViewController = _R.nib._DobromarketOrderConfirmationViewController()
    /// Nib `ElementLeftImagePreviewCell`.
    static let elementLeftImagePreviewCell = _R.nib._ElementLeftImagePreviewCell()
    /// Nib `ExpandableTextBoxTableViewCell`.
    static let expandableTextBoxTableViewCell = _R.nib._ExpandableTextBoxTableViewCell()
    /// Nib `GarminConnectionViewController`.
    static let garminConnectionViewController = _R.nib._GarminConnectionViewController()
    /// Nib `HorizontalLeftImagePreviewCollectionTableViewCell`.
    static let horizontalLeftImagePreviewCollectionTableViewCell = _R.nib._HorizontalLeftImagePreviewCollectionTableViewCell()
    /// Nib `LeftImagePreviewCollectionViewCell`.
    static let leftImagePreviewCollectionViewCell = _R.nib._LeftImagePreviewCollectionViewCell()
    /// Nib `MainScreenItemCell`.
    static let mainScreenItemCell = _R.nib._MainScreenItemCell()
    /// Nib `MultilineColorfulRightFooterTableViewCell`.
    static let multilineColorfulRightFooterTableViewCell = _R.nib._MultilineColorfulRightFooterTableViewCell()
    /// Nib `MultilineSpannedTextTableViewCell`.
    static let multilineSpannedTextTableViewCell = _R.nib._MultilineSpannedTextTableViewCell()
    /// Nib `NarrowImageTableViewCell`.
    static let narrowImageTableViewCell = _R.nib._NarrowImageTableViewCell()
    /// Nib `PermissionView`.
    static let permissionView = _R.nib._PermissionView()
    /// Nib `PlaceViewController`.
    static let placeViewController = _R.nib._PlaceViewController()
    /// Nib `PromocodeModalViewController`.
    static let promocodeModalViewController = _R.nib._PromocodeModalViewController()
    /// Nib `RatingViewController`.
    static let ratingViewController = _R.nib._RatingViewController()
    /// Nib `ResizableMapViewController`.
    static let resizableMapViewController = _R.nib._ResizableMapViewController()
    /// Nib `ResultModalViewController`.
    static let resultModalViewController = _R.nib._ResultModalViewController()
    /// Nib `RightSmallClippedImageTableViewCell`.
    static let rightSmallClippedImageTableViewCell = _R.nib._RightSmallClippedImageTableViewCell()
    /// Nib `SingleButtonTableViewCell`.
    static let singleButtonTableViewCell = _R.nib._SingleButtonTableViewCell()
    /// Nib `SingleShortButtonTableViewCell`.
    static let singleShortButtonTableViewCell = _R.nib._SingleShortButtonTableViewCell()
    /// Nib `TextBoxTableViewCell`.
    static let textBoxTableViewCell = _R.nib._TextBoxTableViewCell()
    /// Nib `TitleBadgeChipFooterTableViewCell`.
    static let titleBadgeChipFooterTableViewCell = _R.nib._TitleBadgeChipFooterTableViewCell()
    /// Nib `TitlePromocodeDescriptionViewController`.
    static let titlePromocodeDescriptionViewController = _R.nib._TitlePromocodeDescriptionViewController()
    /// Nib `TutorialView`.
    static let tutorialView = _R.nib._TutorialView()
    /// Nib `UnderlinedSegmentedControlTableViewCell`.
    static let underlinedSegmentedControlTableViewCell = _R.nib._UnderlinedSegmentedControlTableViewCell()
    /// Nib `ViewControllerHolderTableCell`.
    static let viewControllerHolderTableCell = _R.nib._ViewControllerHolderTableCell()
    /// Nib `WebViewController`.
    static let webViewController = _R.nib._WebViewController()
    /// Nib `WorkoutDescriptionViewController`.
    static let workoutDescriptionViewController = _R.nib._WorkoutDescriptionViewController()
    /// Nib `WorkoutTypeModalViewController`.
    static let workoutTypeModalViewController = _R.nib._WorkoutTypeModalViewController()
    /// Nib `WorkoutViewController`.
    static let workoutViewController = _R.nib._WorkoutViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BigImageHorizontalSmallCardTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bigImageHorizontalSmallCardTableCell) instead")
    static func bigImageHorizontalSmallCardTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bigImageHorizontalSmallCardTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BigImageTitleBadgeTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bigImageTitleBadgeTableViewCell) instead")
    static func bigImageTitleBadgeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bigImageTitleBadgeTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BigImageTitleFooterTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bigImageTitleFooterTableViewCell) instead")
    static func bigImageTitleFooterTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bigImageTitleFooterTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ColoredFootersItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.coloredFootersItemCell) instead")
    static func coloredFootersItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coloredFootersItemCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CroppedRightImageChipCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.croppedRightImageChipCollectionViewCell) instead")
    static func croppedRightImageChipCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.croppedRightImageChipCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DobromarketOrderConfirmationViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dobromarketOrderConfirmationViewController) instead")
    static func dobromarketOrderConfirmationViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dobromarketOrderConfirmationViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ElementLeftImagePreviewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.elementLeftImagePreviewCell) instead")
    static func elementLeftImagePreviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.elementLeftImagePreviewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExpandableTextBoxTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.expandableTextBoxTableViewCell) instead")
    static func expandableTextBoxTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.expandableTextBoxTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GarminConnectionViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.garminConnectionViewController) instead")
    static func garminConnectionViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.garminConnectionViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HorizontalLeftImagePreviewCollectionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.horizontalLeftImagePreviewCollectionTableViewCell) instead")
    static func horizontalLeftImagePreviewCollectionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.horizontalLeftImagePreviewCollectionTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LeftImagePreviewCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.leftImagePreviewCollectionViewCell) instead")
    static func leftImagePreviewCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.leftImagePreviewCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MainScreenItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mainScreenItemCell) instead")
    static func mainScreenItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainScreenItemCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MultilineColorfulRightFooterTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.multilineColorfulRightFooterTableViewCell) instead")
    static func multilineColorfulRightFooterTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.multilineColorfulRightFooterTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MultilineSpannedTextTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.multilineSpannedTextTableViewCell) instead")
    static func multilineSpannedTextTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.multilineSpannedTextTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NarrowImageTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.narrowImageTableViewCell) instead")
    static func narrowImageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.narrowImageTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PermissionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.permissionView) instead")
    static func permissionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.permissionView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlaceViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.placeViewController) instead")
    static func placeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.placeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PromocodeModalViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.promocodeModalViewController) instead")
    static func promocodeModalViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.promocodeModalViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RatingViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ratingViewController) instead")
    static func ratingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ratingViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ResizableMapViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.resizableMapViewController) instead")
    static func resizableMapViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resizableMapViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ResultModalViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.resultModalViewController) instead")
    static func resultModalViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resultModalViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RightSmallClippedImageTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rightSmallClippedImageTableViewCell) instead")
    static func rightSmallClippedImageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rightSmallClippedImageTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SingleButtonTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.singleButtonTableViewCell) instead")
    static func singleButtonTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.singleButtonTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SingleShortButtonTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.singleShortButtonTableViewCell) instead")
    static func singleShortButtonTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.singleShortButtonTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TextBoxTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.textBoxTableViewCell) instead")
    static func textBoxTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textBoxTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TitleBadgeChipFooterTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.titleBadgeChipFooterTableViewCell) instead")
    static func titleBadgeChipFooterTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.titleBadgeChipFooterTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TitlePromocodeDescriptionViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.titlePromocodeDescriptionViewController) instead")
    static func titlePromocodeDescriptionViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.titlePromocodeDescriptionViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TutorialView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tutorialView) instead")
    static func tutorialView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tutorialView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UnderlinedSegmentedControlTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.underlinedSegmentedControlTableViewCell) instead")
    static func underlinedSegmentedControlTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.underlinedSegmentedControlTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ViewControllerHolderTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.viewControllerHolderTableCell) instead")
    static func viewControllerHolderTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.viewControllerHolderTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WebViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.webViewController) instead")
    static func webViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.webViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutDescriptionViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutDescriptionViewController) instead")
    static func workoutDescriptionViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutDescriptionViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutTypeModalViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutTypeModalViewController) instead")
    static func workoutTypeModalViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutTypeModalViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WorkoutViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.workoutViewController) instead")
    static func workoutViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.workoutViewController)
    }
    #endif

    static func bigImageHorizontalSmallCardTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BigImageHorizontalSmallCardTableCell? {
      return R.nib.bigImageHorizontalSmallCardTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BigImageHorizontalSmallCardTableCell
    }

    static func bigImageTitleBadgeTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BigImageTitleBadgeTableViewCell? {
      return R.nib.bigImageTitleBadgeTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BigImageTitleBadgeTableViewCell
    }

    static func bigImageTitleFooterTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BigImageTitleFooterTableViewCell? {
      return R.nib.bigImageTitleFooterTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BigImageTitleFooterTableViewCell
    }

    static func coloredFootersItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ColoredFootersItemCell? {
      return R.nib.coloredFootersItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColoredFootersItemCell
    }

    static func croppedRightImageChipCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CroppedRightImageChipCollectionViewCell? {
      return R.nib.croppedRightImageChipCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CroppedRightImageChipCollectionViewCell
    }

    static func dobromarketOrderConfirmationViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.dobromarketOrderConfirmationViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func elementLeftImagePreviewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ElementLeftImagePreviewCell? {
      return R.nib.elementLeftImagePreviewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ElementLeftImagePreviewCell
    }

    static func expandableTextBoxTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExpandableTextBoxTableViewCell? {
      return R.nib.expandableTextBoxTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExpandableTextBoxTableViewCell
    }

    static func garminConnectionViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.garminConnectionViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func horizontalLeftImagePreviewCollectionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HorizontalLeftImagePreviewCollectionTableViewCell? {
      return R.nib.horizontalLeftImagePreviewCollectionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HorizontalLeftImagePreviewCollectionTableViewCell
    }

    static func leftImagePreviewCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LeftImagePreviewCollectionViewCell? {
      return R.nib.leftImagePreviewCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeftImagePreviewCollectionViewCell
    }

    static func mainScreenItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MainScreenItemCell? {
      return R.nib.mainScreenItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MainScreenItemCell
    }

    static func multilineColorfulRightFooterTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MultilineColorfulRightFooterTableViewCell? {
      return R.nib.multilineColorfulRightFooterTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MultilineColorfulRightFooterTableViewCell
    }

    static func multilineSpannedTextTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MultilineSpannedTextTableViewCell? {
      return R.nib.multilineSpannedTextTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MultilineSpannedTextTableViewCell
    }

    static func narrowImageTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NarrowImageTableViewCell? {
      return R.nib.narrowImageTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NarrowImageTableViewCell
    }

    static func permissionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PermissionView? {
      return R.nib.permissionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PermissionView
    }

    static func placeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.placeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func promocodeModalViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.promocodeModalViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func ratingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.ratingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func resizableMapViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.resizableMapViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func resultModalViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.resultModalViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func rightSmallClippedImageTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RightSmallClippedImageTableViewCell? {
      return R.nib.rightSmallClippedImageTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RightSmallClippedImageTableViewCell
    }

    static func singleButtonTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SingleButtonTableViewCell? {
      return R.nib.singleButtonTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SingleButtonTableViewCell
    }

    static func singleShortButtonTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SingleShortButtonTableViewCell? {
      return R.nib.singleShortButtonTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SingleShortButtonTableViewCell
    }

    static func textBoxTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TextBoxTableViewCell? {
      return R.nib.textBoxTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextBoxTableViewCell
    }

    static func titleBadgeChipFooterTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleBadgeChipFooterTableViewCell? {
      return R.nib.titleBadgeChipFooterTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleBadgeChipFooterTableViewCell
    }

    static func titlePromocodeDescriptionViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.titlePromocodeDescriptionViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func tutorialView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.tutorialView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func underlinedSegmentedControlTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UnderlinedSegmentedControlTableViewCell? {
      return R.nib.underlinedSegmentedControlTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UnderlinedSegmentedControlTableViewCell
    }

    static func viewControllerHolderTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ViewControllerHolderTableCell? {
      return R.nib.viewControllerHolderTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ViewControllerHolderTableCell
    }

    static func webViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.webViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func workoutDescriptionViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.workoutDescriptionViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func workoutTypeModalViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.workoutTypeModalViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func workoutViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.workoutViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 1 localization keys.
    struct localizable {
      /// en translation: %#@v1_steps_count@
      ///
      /// Locales: ru, en
      static let stepscount = Rswift.StringResource(key: "stepscount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)

      /// en translation: %#@v1_steps_count@
      ///
      /// Locales: ru, en
      static func stepscount(v1_steps_count value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("stepscount", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "stepscount"
        }

        let format = NSLocalizedString("stepscount", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 87 localization keys.
    struct main {
      /// ru translation:  
      ///
      /// Locales: ru
      static let b5iNk7FoTitle = Rswift.StringResource(key: "b5i-Nk-7Fo.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let brLfVQJTitle = Rswift.StringResource(key: "7br-lf-VQJ.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let byz38T0rTitle = Rswift.StringResource(key: "BYZ-38-t0r.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let c3OYMCQdTitle = Rswift.StringResource(key: "c3O-YM-cQd.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let ee0YGTDfTitle = Rswift.StringResource(key: "ee0-YG-tDf.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let etYUaFTTTitle = Rswift.StringResource(key: "etY-Ua-FTT.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let g1oWWZ6QTitle = Rswift.StringResource(key: "g1o-WW-Z6Q.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let jlbnrwFhTitle = Rswift.StringResource(key: "JLB-NR-wFh.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let jven8GDaTitle = Rswift.StringResource(key: "JVE-N8-gDa.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let kPPRmLXLTitle = Rswift.StringResource(key: "kPP-rm-LXL.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let kzTKwMAzTitle = Rswift.StringResource(key: "KzT-kw-mAz.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let lP5AqXGiTitle = Rswift.StringResource(key: "lP5-aq-XGi.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let nzndgFfDTitle = Rswift.StringResource(key: "NZN-dG-ffD.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let ofeNF9ZSTitle = Rswift.StringResource(key: "ofe-NF-9ZS.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let pJ4OgPfDTitle = Rswift.StringResource(key: "pJ4-og-pfD.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let qtcIx1fyTitle = Rswift.StringResource(key: "Qtc-Ix-1fy.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let rGcWgVTitle = Rswift.StringResource(key: "59R-gc-WgV.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let xcx94YsQTitle = Rswift.StringResource(key: "XCX-94-YsQ.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let xvTFT7DeTitle = Rswift.StringResource(key: "xvT-fT-7De.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation:  
      ///
      /// Locales: ru
      static let yw04OM81Title = Rswift.StringResource(key: "yw0-4O-M81.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: +7
      ///
      /// Locales: ru
      static let a3zEhQIzText = Rswift.StringResource(key: "a3z-eh-qIz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: 0 д₽
      ///
      /// Locales: ru
      static let stmUQNUMText = Rswift.StringResource(key: "Stm-UQ-nUM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: 0 д₽
      ///
      /// Locales: ru
      static let zkVVu5GcText = Rswift.StringResource(key: "zkV-Vu-5Gc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ?
      ///
      /// Locales: ru
      static let kGqSpCtGText = Rswift.StringResource(key: "kGq-Sp-ctG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ?
      ///
      /// Locales: ru
      static let mOe773Text = Rswift.StringResource(key: "39m-Oe-773.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ?
      ///
      /// Locales: ru
      static let wLV6R8gText = Rswift.StringResource(key: "4wL-V6-r8g.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ? км
      ///
      /// Locales: ru
      static let apWQj70jText = Rswift.StringResource(key: "apW-qj-70j.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      ///
      /// Locales: ru
      static let efqBMDpIText = Rswift.StringResource(key: "efq-BM-dpI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Версия приложения:
      ///
      /// Locales: ru
      static let dp5LwGpGText = Rswift.StringResource(key: "Dp5-Lw-gpG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Войти
      ///
      /// Locales: ru
      static let jr7OwILcText = Rswift.StringResource(key: "JR7-Ow-iLc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Войти
      ///
      /// Locales: ru
      static let pPcEDpNormalTitle = Rswift.StringResource(key: "65p-Pc-EDp.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Войти
      ///
      /// Locales: ru
      static let wZzMtBLqText = Rswift.StringResource(key: "wZz-Mt-bLq.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Войти через Карту жителя НО
      ///
      /// Locales: ru
      static let idoUsQhkNormalTitle = Rswift.StringResource(key: "Ido-Us-qhk.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выйти
      ///
      /// Locales: ru
      static let dBmI32MDNormalTitle = Rswift.StringResource(key: "DBm-I3-2MD.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Готово
      ///
      /// Locales: ru
      static let bNfVkU57NormalTitle = Rswift.StringResource(key: "BNf-Vk-U57.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Далее
      ///
      /// Locales: ru
      static let lVMVI0c8NormalTitle = Rswift.StringResource(key: "lVM-VI-0c8.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Далее
      ///
      /// Locales: ru
      static let pVwQSKY3NormalTitle = Rswift.StringResource(key: "PVw-QS-kY3.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Добавить устройство
      ///
      /// Locales: ru
      static let bjwlAv3NormalTitle = Rswift.StringResource(key: "2BJ-wL-Av3.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Добро пожаловать
      ///
      /// Locales: ru
      static let xpWS5QfSText = Rswift.StringResource(key: "xpW-S5-QfS.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Добромаркет
      ///
      /// Locales: ru
      static let i8BYMNuHText = Rswift.StringResource(key: "i8B-YM-NuH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Женский
      ///
      /// Locales: ru
      static let m9YAAHnsNormalTitle = Rswift.StringResource(key: "M9Y-AA-hns.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Заработать
      ///
      /// Locales: ru
      static let q1gH6JLsText = Rswift.StringResource(key: "q1g-h6-JLs.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: История баланса
      ///
      /// Locales: ru
      static let gaanozBbTitle = Rswift.StringResource(key: "GAA-nO-zBb.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: История баланса
      ///
      /// Locales: ru
      static let kK0Iw9Title = Rswift.StringResource(key: "77k-K0-iw9.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Карта жителя НО - это удобная цифровая платформа для получения доступа к городским услугам, льготам и бонусам
      ///
      /// Locales: ru
      static let r3bRI3AfText = Rswift.StringResource(key: "r3b-RI-3Af.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Карта жителя Нижегородской Области — твой пропуск в Добромаркет
      ///
      /// Locales: ru
      static let yxHZ8XoHText = Rswift.StringResource(key: "yxH-Z8-xoH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Квесты
      ///
      /// Locales: ru
      static let nxdMeYWKText = Rswift.StringResource(key: "Nxd-me-YWK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Купить
      ///
      /// Locales: ru
      static let lR4HrCHxNormalTitle = Rswift.StringResource(key: "lR4-Hr-cHx.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Меню
      ///
      /// Locales: ru
      static let gCLYlYtSTitle = Rswift.StringResource(key: "gCL-Yl-ytS.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Меню
      ///
      /// Locales: ru
      static let jviRhUyzText = Rswift.StringResource(key: "Jvi-Rh-Uyz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мужской
      ///
      /// Locales: ru
      static let ayQ8jOhnNormalTitle = Rswift.StringResource(key: "ayQ-8j-Ohn.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: На номер телефона был выслан код. Введи код-подтверждение ниже
      ///
      /// Locales: ru
      static let pjxbqGhhText = Rswift.StringResource(key: "PJX-bQ-Ghh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Настроить
      ///
      /// Locales: ru
      static let lxd5nBText = Rswift.StringResource(key: "36L-XD-5nB.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Нет соединения с интернетом
      ///
      /// Locales: ru
      static let zhdh8K9TText = Rswift.StringResource(key: "ZHD-H8-K9T.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Нет соединения с интернетом 
      ///
      /// Locales: ru
      static let g3GzT8gText = Rswift.StringResource(key: "8G3-Gz-t8g.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: О приложении
      ///
      /// Locales: ru
      static let sJaEDQ1vNormalTitle = Rswift.StringResource(key: "SJa-ED-q1v.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Обратная связь
      ///
      /// Locales: ru
      static let ndVO1UFcNormalTitle = Rswift.StringResource(key: "ndV-O1-uFc.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Осталось заполнить данные для вывода статистики.
      ///
      /// Locales: ru
      static let k9CnXOIText = Rswift.StringResource(key: "9k9-cn-XOI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Осталось:
      ///
      /// Locales: ru
      static let q84FEHRzText = Rswift.StringResource(key: "q84-fE-hRz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отправить код
      ///
      /// Locales: ru
      static let su0kTodNormalTitle = Rswift.StringResource(key: "2su-0k-tod.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отправить код повторно
      ///
      /// Locales: ru
      static let iNeJxUbpNormalTitle = Rswift.StringResource(key: "iNe-Jx-Ubp.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Повторная отправка кода через: N секунд
      ///
      /// Locales: ru
      static let ug36o4GhText = Rswift.StringResource(key: "ug3-6o-4Gh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Показать QR-код
      ///
      /// Locales: ru
      static let pUbY2AxuNormalTitle = Rswift.StringResource(key: "pUb-y2-axu.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Покупки
      ///
      /// Locales: ru
      static let iwXBRJqDText = Rswift.StringResource(key: "IwX-bR-JqD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Покупки Добромаркет
      ///
      /// Locales: ru
      static let wcDHNOQLNormalTitle = Rswift.StringResource(key: "WcD-hN-oQL.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Получить промокод
      ///
      /// Locales: ru
      static let aCZyFJgNormalTitle = Rswift.StringResource(key: "0aC-Zy-fJg.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Помощь
      ///
      /// Locales: ru
      static let fzNHGVeyNormalTitle = Rswift.StringResource(key: "FzN-HG-vey.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Попробовать снова
      ///
      /// Locales: ru
      static let q1QrWUfNormalTitle = Rswift.StringResource(key: "2q1-qr-WUf.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Попробовать снова
      ///
      /// Locales: ru
      static let zz7GdAicNormalTitle = Rswift.StringResource(key: "Zz7-gd-Aic.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Потратить
      ///
      /// Locales: ru
      static let fcT5JB0dTitle = Rswift.StringResource(key: "FcT-5J-b0d.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Проверь настройки подключения
      ///
      /// Locales: ru
      static let sMOPn4zhText = Rswift.StringResource(key: "sMO-Pn-4zh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Проверь настройки подключения и попробуй еще раз.
      ///
      /// Locales: ru
      static let fuE3UPpText = Rswift.StringResource(key: "1Fu-E3-uPp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Промокод
      ///
      /// Locales: ru
      static let mgeVh3naText = Rswift.StringResource(key: "Mge-vh-3na.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пропустить
      ///
      /// Locales: ru
      static let eZ8IJACfNormalTitle = Rswift.StringResource(key: "eZ8-iJ-aCf.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Прочитать QR код на кассе
      ///
      /// Locales: ru
      static let hmlN1LOsNormalTitle = Rswift.StringResource(key: "hml-n1-lOs.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Разрешения
      ///
      /// Locales: ru
      static let jNvRGV6YText = Rswift.StringResource(key: "JNv-rG-V6Y.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Рейтинги
      ///
      /// Locales: ru
      static let onl34YPANormalTitle = Rswift.StringResource(key: "onl-34-YPA.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сайт партнера
      ///
      /// Locales: ru
      static let aMsT8GllNormalTitle = Rswift.StringResource(key: "aMs-t8-gll.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: События
      ///
      /// Locales: ru
      static let si9G7K8HTitle = Rswift.StringResource(key: "Si9-g7-K8H.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Твои доброрубли
      ///
      /// Locales: ru
      static let ep5TKEm9Text = Rswift.StringResource(key: "Ep5-TK-em9.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Твои доброрубли
      ///
      /// Locales: ru
      static let jzFOPEUAText = Rswift.StringResource(key: "JzF-OP-eUA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Твой вес
      ///
      /// Locales: ru
      static let caYRFeDPlaceholder = Rswift.StringResource(key: "8ca-YR-FeD.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Твой год рождения
      ///
      /// Locales: ru
      static let gbyu4KHcPlaceholder = Rswift.StringResource(key: "GBY-U4-kHc.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Твой рост
      ///
      /// Locales: ru
      static let iaNIKNoPlaceholder = Rswift.StringResource(key: "1Ia-NI-kNo.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Текст зачем нам нужны эти разрешения. Можно в две строчки
      ///
      /// Locales: ru
      static let iJJZ8F0AText = Rswift.StringResource(key: "iJJ-Z8-F0A.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Чтобы воспользоваться купоном, покажите его из мобильного приложения сотруднику на кассе. Просим предварительно связаться с партнером.
      ///
      /// Locales: ru
      static let bkcFDIXmText = Rswift.StringResource(key: "bkc-fD-IXm.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Чтобы закончить регистрацию, введи свой номер телефона для его подтверждения
      ///
      /// Locales: ru
      static let dfXIOpaText = Rswift.StringResource(key: "8df-xI-opa.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)

      /// ru translation:  
      ///
      /// Locales: ru
      static func b5iNk7FoTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b5i-Nk-7Fo.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "b5i-Nk-7Fo.title"
        }

        return NSLocalizedString("b5i-Nk-7Fo.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func brLfVQJTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7br-lf-VQJ.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7br-lf-VQJ.title"
        }

        return NSLocalizedString("7br-lf-VQJ.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func byz38T0rTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BYZ-38-t0r.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BYZ-38-t0r.title"
        }

        return NSLocalizedString("BYZ-38-t0r.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func c3OYMCQdTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c3O-YM-cQd.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "c3O-YM-cQd.title"
        }

        return NSLocalizedString("c3O-YM-cQd.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func ee0YGTDfTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ee0-YG-tDf.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ee0-YG-tDf.title"
        }

        return NSLocalizedString("ee0-YG-tDf.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func etYUaFTTTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("etY-Ua-FTT.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "etY-Ua-FTT.title"
        }

        return NSLocalizedString("etY-Ua-FTT.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func g1oWWZ6QTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g1o-WW-Z6Q.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "g1o-WW-Z6Q.title"
        }

        return NSLocalizedString("g1o-WW-Z6Q.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func jlbnrwFhTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JLB-NR-wFh.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JLB-NR-wFh.title"
        }

        return NSLocalizedString("JLB-NR-wFh.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func jven8GDaTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JVE-N8-gDa.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JVE-N8-gDa.title"
        }

        return NSLocalizedString("JVE-N8-gDa.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func kPPRmLXLTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kPP-rm-LXL.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kPP-rm-LXL.title"
        }

        return NSLocalizedString("kPP-rm-LXL.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func kzTKwMAzTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KzT-kw-mAz.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "KzT-kw-mAz.title"
        }

        return NSLocalizedString("KzT-kw-mAz.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func lP5AqXGiTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lP5-aq-XGi.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lP5-aq-XGi.title"
        }

        return NSLocalizedString("lP5-aq-XGi.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func nzndgFfDTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NZN-dG-ffD.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NZN-dG-ffD.title"
        }

        return NSLocalizedString("NZN-dG-ffD.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func ofeNF9ZSTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ofe-NF-9ZS.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ofe-NF-9ZS.title"
        }

        return NSLocalizedString("ofe-NF-9ZS.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func pJ4OgPfDTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pJ4-og-pfD.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pJ4-og-pfD.title"
        }

        return NSLocalizedString("pJ4-og-pfD.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func qtcIx1fyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Qtc-Ix-1fy.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Qtc-Ix-1fy.title"
        }

        return NSLocalizedString("Qtc-Ix-1fy.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func rGcWgVTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("59R-gc-WgV.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "59R-gc-WgV.title"
        }

        return NSLocalizedString("59R-gc-WgV.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func xcx94YsQTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XCX-94-YsQ.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XCX-94-YsQ.title"
        }

        return NSLocalizedString("XCX-94-YsQ.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func xvTFT7DeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xvT-fT-7De.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xvT-fT-7De.title"
        }

        return NSLocalizedString("xvT-fT-7De.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation:  
      ///
      /// Locales: ru
      static func yw04OM81Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yw0-4O-M81.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yw0-4O-M81.title"
        }

        return NSLocalizedString("yw0-4O-M81.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: +7
      ///
      /// Locales: ru
      static func a3zEhQIzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a3z-eh-qIz.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "a3z-eh-qIz.text"
        }

        return NSLocalizedString("a3z-eh-qIz.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: 0 д₽
      ///
      /// Locales: ru
      static func stmUQNUMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Stm-UQ-nUM.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Stm-UQ-nUM.text"
        }

        return NSLocalizedString("Stm-UQ-nUM.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: 0 д₽
      ///
      /// Locales: ru
      static func zkVVu5GcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zkV-Vu-5Gc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zkV-Vu-5Gc.text"
        }

        return NSLocalizedString("zkV-Vu-5Gc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: ?
      ///
      /// Locales: ru
      static func kGqSpCtGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kGq-Sp-ctG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kGq-Sp-ctG.text"
        }

        return NSLocalizedString("kGq-Sp-ctG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: ?
      ///
      /// Locales: ru
      static func mOe773Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("39m-Oe-773.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "39m-Oe-773.text"
        }

        return NSLocalizedString("39m-Oe-773.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: ?
      ///
      /// Locales: ru
      static func wLV6R8gText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4wL-V6-r8g.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4wL-V6-r8g.text"
        }

        return NSLocalizedString("4wL-V6-r8g.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: ? км
      ///
      /// Locales: ru
      static func apWQj70jText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("apW-qj-70j.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "apW-qj-70j.text"
        }

        return NSLocalizedString("apW-qj-70j.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      ///
      /// Locales: ru
      static func efqBMDpIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("efq-BM-dpI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "efq-BM-dpI.text"
        }

        return NSLocalizedString("efq-BM-dpI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Версия приложения:
      ///
      /// Locales: ru
      static func dp5LwGpGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dp5-Lw-gpG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Dp5-Lw-gpG.text"
        }

        return NSLocalizedString("Dp5-Lw-gpG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Войти
      ///
      /// Locales: ru
      static func jr7OwILcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JR7-Ow-iLc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JR7-Ow-iLc.text"
        }

        return NSLocalizedString("JR7-Ow-iLc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Войти
      ///
      /// Locales: ru
      static func pPcEDpNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("65p-Pc-EDp.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "65p-Pc-EDp.normalTitle"
        }

        return NSLocalizedString("65p-Pc-EDp.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Войти
      ///
      /// Locales: ru
      static func wZzMtBLqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wZz-Mt-bLq.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wZz-Mt-bLq.text"
        }

        return NSLocalizedString("wZz-Mt-bLq.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Войти через Карту жителя НО
      ///
      /// Locales: ru
      static func idoUsQhkNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ido-Us-qhk.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ido-Us-qhk.normalTitle"
        }

        return NSLocalizedString("Ido-Us-qhk.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Выйти
      ///
      /// Locales: ru
      static func dBmI32MDNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DBm-I3-2MD.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DBm-I3-2MD.normalTitle"
        }

        return NSLocalizedString("DBm-I3-2MD.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Готово
      ///
      /// Locales: ru
      static func bNfVkU57NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BNf-Vk-U57.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BNf-Vk-U57.normalTitle"
        }

        return NSLocalizedString("BNf-Vk-U57.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Далее
      ///
      /// Locales: ru
      static func lVMVI0c8NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lVM-VI-0c8.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lVM-VI-0c8.normalTitle"
        }

        return NSLocalizedString("lVM-VI-0c8.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Далее
      ///
      /// Locales: ru
      static func pVwQSKY3NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PVw-QS-kY3.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PVw-QS-kY3.normalTitle"
        }

        return NSLocalizedString("PVw-QS-kY3.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Добавить устройство
      ///
      /// Locales: ru
      static func bjwlAv3NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2BJ-wL-Av3.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2BJ-wL-Av3.normalTitle"
        }

        return NSLocalizedString("2BJ-wL-Av3.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Добро пожаловать
      ///
      /// Locales: ru
      static func xpWS5QfSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xpW-S5-QfS.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xpW-S5-QfS.text"
        }

        return NSLocalizedString("xpW-S5-QfS.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Добромаркет
      ///
      /// Locales: ru
      static func i8BYMNuHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("i8B-YM-NuH.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "i8B-YM-NuH.text"
        }

        return NSLocalizedString("i8B-YM-NuH.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Женский
      ///
      /// Locales: ru
      static func m9YAAHnsNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("M9Y-AA-hns.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "M9Y-AA-hns.normalTitle"
        }

        return NSLocalizedString("M9Y-AA-hns.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Заработать
      ///
      /// Locales: ru
      static func q1gH6JLsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("q1g-h6-JLs.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "q1g-h6-JLs.text"
        }

        return NSLocalizedString("q1g-h6-JLs.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: История баланса
      ///
      /// Locales: ru
      static func gaanozBbTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GAA-nO-zBb.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GAA-nO-zBb.title"
        }

        return NSLocalizedString("GAA-nO-zBb.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: История баланса
      ///
      /// Locales: ru
      static func kK0Iw9Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("77k-K0-iw9.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "77k-K0-iw9.title"
        }

        return NSLocalizedString("77k-K0-iw9.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Карта жителя НО - это удобная цифровая платформа для получения доступа к городским услугам, льготам и бонусам
      ///
      /// Locales: ru
      static func r3bRI3AfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("r3b-RI-3Af.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "r3b-RI-3Af.text"
        }

        return NSLocalizedString("r3b-RI-3Af.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Карта жителя Нижегородской Области — твой пропуск в Добромаркет
      ///
      /// Locales: ru
      static func yxHZ8XoHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yxH-Z8-xoH.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yxH-Z8-xoH.text"
        }

        return NSLocalizedString("yxH-Z8-xoH.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Квесты
      ///
      /// Locales: ru
      static func nxdMeYWKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nxd-me-YWK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Nxd-me-YWK.text"
        }

        return NSLocalizedString("Nxd-me-YWK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Купить
      ///
      /// Locales: ru
      static func lR4HrCHxNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lR4-Hr-cHx.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lR4-Hr-cHx.normalTitle"
        }

        return NSLocalizedString("lR4-Hr-cHx.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Меню
      ///
      /// Locales: ru
      static func gCLYlYtSTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gCL-Yl-ytS.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gCL-Yl-ytS.title"
        }

        return NSLocalizedString("gCL-Yl-ytS.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Меню
      ///
      /// Locales: ru
      static func jviRhUyzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Jvi-Rh-Uyz.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Jvi-Rh-Uyz.text"
        }

        return NSLocalizedString("Jvi-Rh-Uyz.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Мужской
      ///
      /// Locales: ru
      static func ayQ8jOhnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ayQ-8j-Ohn.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ayQ-8j-Ohn.normalTitle"
        }

        return NSLocalizedString("ayQ-8j-Ohn.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: На номер телефона был выслан код. Введи код-подтверждение ниже
      ///
      /// Locales: ru
      static func pjxbqGhhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PJX-bQ-Ghh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PJX-bQ-Ghh.text"
        }

        return NSLocalizedString("PJX-bQ-Ghh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Настроить
      ///
      /// Locales: ru
      static func lxd5nBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("36L-XD-5nB.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "36L-XD-5nB.text"
        }

        return NSLocalizedString("36L-XD-5nB.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Нет соединения с интернетом
      ///
      /// Locales: ru
      static func zhdh8K9TText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZHD-H8-K9T.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZHD-H8-K9T.text"
        }

        return NSLocalizedString("ZHD-H8-K9T.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Нет соединения с интернетом 
      ///
      /// Locales: ru
      static func g3GzT8gText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8G3-Gz-t8g.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8G3-Gz-t8g.text"
        }

        return NSLocalizedString("8G3-Gz-t8g.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: О приложении
      ///
      /// Locales: ru
      static func sJaEDQ1vNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SJa-ED-q1v.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "SJa-ED-q1v.normalTitle"
        }

        return NSLocalizedString("SJa-ED-q1v.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Обратная связь
      ///
      /// Locales: ru
      static func ndVO1UFcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ndV-O1-uFc.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ndV-O1-uFc.normalTitle"
        }

        return NSLocalizedString("ndV-O1-uFc.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Осталось заполнить данные для вывода статистики.
      ///
      /// Locales: ru
      static func k9CnXOIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9k9-cn-XOI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9k9-cn-XOI.text"
        }

        return NSLocalizedString("9k9-cn-XOI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Осталось:
      ///
      /// Locales: ru
      static func q84FEHRzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("q84-fE-hRz.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "q84-fE-hRz.text"
        }

        return NSLocalizedString("q84-fE-hRz.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Отправить код
      ///
      /// Locales: ru
      static func su0kTodNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2su-0k-tod.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2su-0k-tod.normalTitle"
        }

        return NSLocalizedString("2su-0k-tod.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Отправить код повторно
      ///
      /// Locales: ru
      static func iNeJxUbpNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iNe-Jx-Ubp.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iNe-Jx-Ubp.normalTitle"
        }

        return NSLocalizedString("iNe-Jx-Ubp.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Повторная отправка кода через: N секунд
      ///
      /// Locales: ru
      static func ug36o4GhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ug3-6o-4Gh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ug3-6o-4Gh.text"
        }

        return NSLocalizedString("ug3-6o-4Gh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Показать QR-код
      ///
      /// Locales: ru
      static func pUbY2AxuNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pUb-y2-axu.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pUb-y2-axu.normalTitle"
        }

        return NSLocalizedString("pUb-y2-axu.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Покупки
      ///
      /// Locales: ru
      static func iwXBRJqDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IwX-bR-JqD.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "IwX-bR-JqD.text"
        }

        return NSLocalizedString("IwX-bR-JqD.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Покупки Добромаркет
      ///
      /// Locales: ru
      static func wcDHNOQLNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WcD-hN-oQL.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WcD-hN-oQL.normalTitle"
        }

        return NSLocalizedString("WcD-hN-oQL.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Получить промокод
      ///
      /// Locales: ru
      static func aCZyFJgNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0aC-Zy-fJg.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0aC-Zy-fJg.normalTitle"
        }

        return NSLocalizedString("0aC-Zy-fJg.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Помощь
      ///
      /// Locales: ru
      static func fzNHGVeyNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FzN-HG-vey.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "FzN-HG-vey.normalTitle"
        }

        return NSLocalizedString("FzN-HG-vey.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Попробовать снова
      ///
      /// Locales: ru
      static func q1QrWUfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2q1-qr-WUf.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2q1-qr-WUf.normalTitle"
        }

        return NSLocalizedString("2q1-qr-WUf.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Попробовать снова
      ///
      /// Locales: ru
      static func zz7GdAicNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Zz7-gd-Aic.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Zz7-gd-Aic.normalTitle"
        }

        return NSLocalizedString("Zz7-gd-Aic.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Потратить
      ///
      /// Locales: ru
      static func fcT5JB0dTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FcT-5J-b0d.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "FcT-5J-b0d.title"
        }

        return NSLocalizedString("FcT-5J-b0d.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Проверь настройки подключения
      ///
      /// Locales: ru
      static func sMOPn4zhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sMO-Pn-4zh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sMO-Pn-4zh.text"
        }

        return NSLocalizedString("sMO-Pn-4zh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Проверь настройки подключения и попробуй еще раз.
      ///
      /// Locales: ru
      static func fuE3UPpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1Fu-E3-uPp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1Fu-E3-uPp.text"
        }

        return NSLocalizedString("1Fu-E3-uPp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Промокод
      ///
      /// Locales: ru
      static func mgeVh3naText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mge-vh-3na.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Mge-vh-3na.text"
        }

        return NSLocalizedString("Mge-vh-3na.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Пропустить
      ///
      /// Locales: ru
      static func eZ8IJACfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eZ8-iJ-aCf.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "eZ8-iJ-aCf.normalTitle"
        }

        return NSLocalizedString("eZ8-iJ-aCf.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Прочитать QR код на кассе
      ///
      /// Locales: ru
      static func hmlN1LOsNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hml-n1-lOs.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hml-n1-lOs.normalTitle"
        }

        return NSLocalizedString("hml-n1-lOs.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Разрешения
      ///
      /// Locales: ru
      static func jNvRGV6YText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JNv-rG-V6Y.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JNv-rG-V6Y.text"
        }

        return NSLocalizedString("JNv-rG-V6Y.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Рейтинги
      ///
      /// Locales: ru
      static func onl34YPANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onl-34-YPA.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "onl-34-YPA.normalTitle"
        }

        return NSLocalizedString("onl-34-YPA.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Сайт партнера
      ///
      /// Locales: ru
      static func aMsT8GllNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aMs-t8-gll.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aMs-t8-gll.normalTitle"
        }

        return NSLocalizedString("aMs-t8-gll.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: События
      ///
      /// Locales: ru
      static func si9G7K8HTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Si9-g7-K8H.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Si9-g7-K8H.title"
        }

        return NSLocalizedString("Si9-g7-K8H.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Твои доброрубли
      ///
      /// Locales: ru
      static func ep5TKEm9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ep5-TK-em9.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ep5-TK-em9.text"
        }

        return NSLocalizedString("Ep5-TK-em9.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Твои доброрубли
      ///
      /// Locales: ru
      static func jzFOPEUAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JzF-OP-eUA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JzF-OP-eUA.text"
        }

        return NSLocalizedString("JzF-OP-eUA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Твой вес
      ///
      /// Locales: ru
      static func caYRFeDPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8ca-YR-FeD.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8ca-YR-FeD.placeholder"
        }

        return NSLocalizedString("8ca-YR-FeD.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Твой год рождения
      ///
      /// Locales: ru
      static func gbyu4KHcPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GBY-U4-kHc.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GBY-U4-kHc.placeholder"
        }

        return NSLocalizedString("GBY-U4-kHc.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Твой рост
      ///
      /// Locales: ru
      static func iaNIKNoPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1Ia-NI-kNo.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1Ia-NI-kNo.placeholder"
        }

        return NSLocalizedString("1Ia-NI-kNo.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Текст зачем нам нужны эти разрешения. Можно в две строчки
      ///
      /// Locales: ru
      static func iJJZ8F0AText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iJJ-Z8-F0A.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iJJ-Z8-F0A.text"
        }

        return NSLocalizedString("iJJ-Z8-F0A.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Чтобы воспользоваться купоном, покажите его из мобильного приложения сотруднику на кассе. Просим предварительно связаться с партнером.
      ///
      /// Locales: ru
      static func bkcFDIXmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bkc-fD-IXm.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bkc-fD-IXm.text"
        }

        return NSLocalizedString("bkc-fD-IXm.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Чтобы закончить регистрацию, введи свой номер телефона для его подтверждения
      ///
      /// Locales: ru
      static func dfXIOpaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8df-xI-opa.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8df-xI-opa.text"
        }

        return NSLocalizedString("8df-xI-opa.text", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BigImageHorizontalSmallCardTableCell.validate()
      try _HorizontalLeftImagePreviewCollectionTableViewCell.validate()
      try _MainScreenItemCell.validate()
      try _MultilineSpannedTextTableViewCell.validate()
      try _RatingViewController.validate()
      try _ResizableMapViewController.validate()
      try _TitlePromocodeDescriptionViewController.validate()
      try _WebViewController.validate()
      try _WorkoutTypeModalViewController.validate()
      try _WorkoutViewController.validate()
    }

    struct _BigImageHorizontalSmallCardTableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BigImageHorizontalSmallCardTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BigImageHorizontalSmallCardTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BigImageHorizontalSmallCardTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconArrowNextLight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconArrowNextLight' is used in nib 'BigImageHorizontalSmallCardTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BigImageTitleBadgeTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BigImageTitleBadgeTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BigImageTitleBadgeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BigImageTitleBadgeTableViewCell
      }

      fileprivate init() {}
    }

    struct _BigImageTitleFooterTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BigImageTitleFooterTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BigImageTitleFooterTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BigImageTitleFooterTableViewCell
      }

      fileprivate init() {}
    }

    struct _ColoredFootersItemCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ColoredFootersItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ColoredFootersItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColoredFootersItemCell
      }

      fileprivate init() {}
    }

    struct _CroppedRightImageChipCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CroppedRightImageChipCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CroppedRightImageChipCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CroppedRightImageChipCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _DobromarketOrderConfirmationViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DobromarketOrderConfirmationViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ElementLeftImagePreviewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ElementLeftImagePreviewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ElementLeftImagePreviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ElementLeftImagePreviewCell
      }

      fileprivate init() {}
    }

    struct _ExpandableTextBoxTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ExpandableTextBoxTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExpandableTextBoxTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExpandableTextBoxTableViewCell
      }

      fileprivate init() {}
    }

    struct _GarminConnectionViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GarminConnectionViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HorizontalLeftImagePreviewCollectionTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HorizontalLeftImagePreviewCollectionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HorizontalLeftImagePreviewCollectionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HorizontalLeftImagePreviewCollectionTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconArrowNext", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconArrowNext' is used in nib 'HorizontalLeftImagePreviewCollectionTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LeftImagePreviewCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LeftImagePreviewCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LeftImagePreviewCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeftImagePreviewCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _MainScreenItemCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MainScreenItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MainScreenItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MainScreenItemCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconBalanceWelcomeItem", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBalanceWelcomeItem' is used in nib 'MainScreenItemCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconMainScreenBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconMainScreenBackground' is used in nib 'MainScreenItemCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconNavigationSmallArrowRightWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconNavigationSmallArrowRightWhite' is used in nib 'MainScreenItemCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconStepsPassedWelcomeItem", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconStepsPassedWelcomeItem' is used in nib 'MainScreenItemCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MultilineColorfulRightFooterTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MultilineColorfulRightFooterTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MultilineColorfulRightFooterTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MultilineColorfulRightFooterTableViewCell
      }

      fileprivate init() {}
    }

    struct _MultilineSpannedTextTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MultilineSpannedTextTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MultilineSpannedTextTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MultilineSpannedTextTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconCheckmarkSuccess", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCheckmarkSuccess' is used in nib 'MultilineSpannedTextTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _NarrowImageTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NarrowImageTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NarrowImageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NarrowImageTableViewCell
      }

      fileprivate init() {}
    }

    struct _PermissionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PermissionView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PermissionView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PermissionView
      }

      fileprivate init() {}
    }

    struct _PlaceViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PlaceViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PromocodeModalViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PromocodeModalViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _RatingViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RatingViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "backgraundRating", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgraundRating' is used in nib 'RatingViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ResizableMapViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ResizableMapViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconRoundButtonMinus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconRoundButtonMinus' is used in nib 'ResizableMapViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconRoundButtonPlus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconRoundButtonPlus' is used in nib 'ResizableMapViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ResultModalViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ResultModalViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _RightSmallClippedImageTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RightSmallClippedImageTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RightSmallClippedImageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RightSmallClippedImageTableViewCell
      }

      fileprivate init() {}
    }

    struct _SingleButtonTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SingleButtonTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SingleButtonTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SingleButtonTableViewCell
      }

      fileprivate init() {}
    }

    struct _SingleShortButtonTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SingleShortButtonTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SingleShortButtonTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SingleShortButtonTableViewCell
      }

      fileprivate init() {}
    }

    struct _TextBoxTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TextBoxTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TextBoxTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextBoxTableViewCell
      }

      fileprivate init() {}
    }

    struct _TitleBadgeChipFooterTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TitleBadgeChipFooterTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleBadgeChipFooterTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleBadgeChipFooterTableViewCell
      }

      fileprivate init() {}
    }

    struct _TitlePromocodeDescriptionViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TitlePromocodeDescriptionViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconCrossGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCrossGray' is used in nib 'TitlePromocodeDescriptionViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TutorialView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TutorialView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _UnderlinedSegmentedControlTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UnderlinedSegmentedControlTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UnderlinedSegmentedControlTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UnderlinedSegmentedControlTableViewCell
      }

      fileprivate init() {}
    }

    struct _ViewControllerHolderTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ViewControllerHolderTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ViewControllerHolderTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ViewControllerHolderTableCell
      }

      fileprivate init() {}
    }

    struct _WebViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WebViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconCrossFailure", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCrossFailure' is used in nib 'WebViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutDescriptionViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WorkoutDescriptionViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _WorkoutTypeModalViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WorkoutTypeModalViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconCheckmarkGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCheckmarkGray' is used in nib 'WorkoutTypeModalViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconCrossGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCrossGray' is used in nib 'WorkoutTypeModalViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconWorkoutCycling", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconWorkoutCycling' is used in nib 'WorkoutTypeModalViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconWorkoutHomeWalking", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconWorkoutHomeWalking' is used in nib 'WorkoutTypeModalViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconWorkoutRunning", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconWorkoutRunning' is used in nib 'WorkoutTypeModalViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconWorkoutSkiing", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconWorkoutSkiing' is used in nib 'WorkoutTypeModalViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconWorkoutWalking", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconWorkoutWalking' is used in nib 'WorkoutTypeModalViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconWorkoutWinterSkating", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconWorkoutWinterSkating' is used in nib 'WorkoutTypeModalViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WorkoutViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WorkoutViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconAlarmClock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconAlarmClock' is used in nib 'WorkoutViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconLocation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconLocation' is used in nib 'WorkoutViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconRunningMan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconRunningMan' is used in nib 'WorkoutViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "SplashScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SplashScreen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let alert = StoryboardViewControllerResource<AlertViewController>(identifier: "alert")
      let bundle = R.hostingBundle
      let dmOrder = StoryboardViewControllerResource<DobromarketOrderViewController>(identifier: "DMOrder")
      let mainTabBarController = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "MainTabBarController")
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"
      let onboardingViewController = StoryboardViewControllerResource<OnboardingViewController>(identifier: "OnboardingViewController")
      let permissionsViewController = StoryboardViewControllerResource<PermissionsViewController>(identifier: "PermissionsViewController")
      let qrCodeScanViewController = StoryboardViewControllerResource<QrCodeScanViewController>(identifier: "QrCodeScanViewController")
      let welcomingScreenNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "WelcomingScreenNavigationController")
      let welcomingScreenViewController = StoryboardViewControllerResource<WelcomingScreenViewController>(identifier: "WelcomingScreenViewController")

      func alert(_: Void = ()) -> AlertViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: alert)
      }

      func dmOrder(_: Void = ()) -> DobromarketOrderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dmOrder)
      }

      func mainTabBarController(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarController)
      }

      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }

      func onboardingViewController(_: Void = ()) -> OnboardingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingViewController)
      }

      func permissionsViewController(_: Void = ()) -> PermissionsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: permissionsViewController)
      }

      func qrCodeScanViewController(_: Void = ()) -> QrCodeScanViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qrCodeScanViewController)
      }

      func welcomingScreenNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: welcomingScreenNavigationController)
      }

      func welcomingScreenViewController(_: Void = ()) -> WelcomingScreenViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: welcomingScreenViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconBottomBarDobrouble", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBottomBarDobrouble' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconBottomBarHome", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBottomBarHome' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconBottomBarMenu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBottomBarMenu' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconBottomBarQr", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBottomBarQr' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconBottomBarSpend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBottomBarSpend' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconCloudWarning", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCloudWarning' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconCrossFailure", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCrossFailure' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconFeedback", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconFeedback' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconLogout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconLogout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconMenuButtonDobroruble", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconMenuButtonDobroruble' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconMenuButtonInformation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconMenuButtonInformation' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconPurpleGradientBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPurpleGradientBackground' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconQrCodeFrame", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconQrCodeFrame' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconSmartband", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSmartband' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconSmsAuth", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSmsAuth' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageWelcomingScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageWelcomingScreen' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "traningUser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'traningUser' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().dmOrder() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dmOrder' could not be loaded from storyboard 'Main' as 'DobromarketOrderViewController'.") }
        if _R.storyboard.main().mainTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarController' could not be loaded from storyboard 'Main' as 'UIKit.UITabBarController'.") }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
        if _R.storyboard.main().onboardingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingViewController' could not be loaded from storyboard 'Main' as 'OnboardingViewController'.") }
        if _R.storyboard.main().permissionsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'permissionsViewController' could not be loaded from storyboard 'Main' as 'PermissionsViewController'.") }
        if _R.storyboard.main().qrCodeScanViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qrCodeScanViewController' could not be loaded from storyboard 'Main' as 'QrCodeScanViewController'.") }
        if _R.storyboard.main().welcomingScreenNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'welcomingScreenNavigationController' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().welcomingScreenViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'welcomingScreenViewController' could not be loaded from storyboard 'Main' as 'WelcomingScreenViewController'.") }
        if _R.storyboard.main().alert() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'alert' could not be loaded from storyboard 'Main' as 'AlertViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
